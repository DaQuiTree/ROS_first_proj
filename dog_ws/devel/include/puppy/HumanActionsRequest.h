// Generated by gencpp from file puppy/HumanActionsRequest.msg
// DO NOT EDIT!


#ifndef PUPPY_MESSAGE_HUMANACTIONSREQUEST_H
#define PUPPY_MESSAGE_HUMANACTIONSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace puppy
{
template <class ContainerAllocator>
struct HumanActionsRequest_
{
  typedef HumanActionsRequest_<ContainerAllocator> Type;

  HumanActionsRequest_()
    : action()
    , value(0)
    , health_input(0)  {
    }
  HumanActionsRequest_(const ContainerAllocator& _alloc)
    : action(_alloc)
    , value(0)
    , health_input(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_type;
  _action_type action;

   typedef uint8_t _value_type;
  _value_type value;

   typedef uint8_t _health_input_type;
  _health_input_type health_input;





  typedef boost::shared_ptr< ::puppy::HumanActionsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::puppy::HumanActionsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct HumanActionsRequest_

typedef ::puppy::HumanActionsRequest_<std::allocator<void> > HumanActionsRequest;

typedef boost::shared_ptr< ::puppy::HumanActionsRequest > HumanActionsRequestPtr;
typedef boost::shared_ptr< ::puppy::HumanActionsRequest const> HumanActionsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::puppy::HumanActionsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::puppy::HumanActionsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace puppy

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'puppy': ['/home/houzy/dog_ws/src/puppy/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::puppy::HumanActionsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::puppy::HumanActionsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::puppy::HumanActionsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::puppy::HumanActionsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::puppy::HumanActionsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::puppy::HumanActionsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::puppy::HumanActionsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f53754b6d2c762739beeb3a736d20ebb";
  }

  static const char* value(const ::puppy::HumanActionsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf53754b6d2c76273ULL;
  static const uint64_t static_value2 = 0x9beeb3a736d20ebbULL;
};

template<class ContainerAllocator>
struct DataType< ::puppy::HumanActionsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "puppy/HumanActionsRequest";
  }

  static const char* value(const ::puppy::HumanActionsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::puppy::HumanActionsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string action\n\
uint8 value\n\
uint8 health_input\n\
";
  }

  static const char* value(const ::puppy::HumanActionsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::puppy::HumanActionsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.value);
      stream.next(m.health_input);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HumanActionsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::puppy::HumanActionsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::puppy::HumanActionsRequest_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action);
    s << indent << "value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.value);
    s << indent << "health_input: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.health_input);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PUPPY_MESSAGE_HUMANACTIONSREQUEST_H
